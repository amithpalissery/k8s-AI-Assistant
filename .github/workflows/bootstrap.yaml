name: Deploy Cluster and Microservices
on:
  workflow_dispatch:

jobs:
  bootstrap-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: .

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -var="key_name=amithnv" -var="private_key_content=${{ secrets.SSH_PRIVATE_KEY }}"
        working-directory: .

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "EC2_IP=$IP" >> $GITHUB_ENV
      - name: Setup SSH key for remote execution
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
      - name: Copy Kubernetes manifests to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no deployment.yaml ubuntu@${{ env.EC2_IP }}:~/
          scp -i private_key.pem -o StrictHostKeyChecking=no service.yaml ubuntu@${{ env.EC2_IP }}:~/
          scp -i private_key.pem -o StrictHostKeyChecking=no serviceaccount.yaml ubuntu@${{ env.EC2_IP }}:~/
          scp -i private_key.pem -o StrictHostKeyChecking=no clusterrole.yaml ubuntu@${{ env.EC2_IP }}:~/
          scp -i private_key.pem -o StrictHostKeyChecking=no clusterrolebinding.yaml ubuntu@${{ env.EC2_IP }}:~/
      - name: Create Kubernetes Secret for AWS Credentials
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} "
            kubectl create secret generic aws-credentials \
              --from-literal=AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
              --from-literal=AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              --from-literal=AWS_REGION='${{ vars.AWS_REGION }}' \
              --dry-run=client -o yaml | kubectl apply -f -
          "
        continue-on-error: true

      - name: Deploy to Kubernetes
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} "
            # Apply deployments and services
            kubectl apply -f serviceaccount.yaml
            kubectl apply -f clusterrole.yaml
            kubectl apply -f clusterrolebinding.yaml
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml

            
            # Wait for deployments to be ready
            kubectl rollout status deployment/k8s-assistant-service --timeout=300s
          "
      - name: Verify Deployment
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} "
            echo 'Checking deployment status...'
            kubectl get pods
            kubectl get services
            
            echo 'Service endpoints:'
            kubectl get svc -o wide
          "
      - name: Output Connection Info
        run: |
          echo "Cluster IP: ${{ env.EC2_IP }}"
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} "
            echo 'Getting service information...'
            kubectl get svc k8s-assistant-service
            
            # Get the NodePort for external access
            NODE_PORT=\$(kubectl get svc k8s-assistant-service -o jsonpath='{.spec.ports[0].nodePort}')
            echo \"\"
            echo \"ðŸš€ Your k8s-assistant app is accessible at:\"
            echo \"   http://${{ env.EC2_IP }}:\$NODE_PORT\"
            echo \"\"
            echo \"Service Details:\"
            kubectl get svc k8s-assistant-service -o wide
          "
      - name: Cleanup SSH key
        if: always()
        run: rm -f private_key.pem
